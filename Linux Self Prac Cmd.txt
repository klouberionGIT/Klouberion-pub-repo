:::::Practice Sets::::
knowledge is crucial for understanding user permissions and identities in a Linux environment

1 who
display user identity

2 id
display user and group information
-------
3 pwd (print working directory)
displays your current location in the file system

4 echo ~
command will display the path to your home directory

5 ls
will list the files and directories in your current working directory 

6 ls ~
lists the contents of your home directory
---
7 Touch
touch file1.txt
 used to create an empty file. If the file already exists, it updates the file's timestamp without changing its content. It's a simple way to create new, empty files
============
8 Echo

echo is a command that prints text.
The > symbol redirects the output of echo into a file named file2.txt. If the file doesn't exist, it's created. If it does exist, its content is replaced.
---------------------
9 (.) 
echo "hidden File" > /hiddenfile
This creates a hidden file. In Linux, any file or directory name that starts with a dot (.) is considered hidden.
----------------
10 mkdir
mkdir testdir
The mkdir command (short for "make directory") creates a new directory named testdir
------------------------
11 ls
This shows the contents of your current directory.

12  -l
The -l option provides a "long" format. You'll see additional details like file permissions, owner, size, and modification date.

13 -a
This will show all files, including the hidden .hiddenfile we created.

14 -la
This combines the long format (-l) with showing all files (-a).

15 ls -l testdir
This lists the contents of the testdir directory
---------------------------------

:::::::::::Copying Files and Directories:::::::::::

16 cp file1.txt file1_copy.txt
This creates a copy of file1.txt named file1_copy.txt in the current directory.

Lets, Copy a file to another directory:

17 cp file2.txt testdir/
This copies file2.txt into the testdir directory.

Copy a directory:

18 cp -r testdir testdir_copy
The -r option stands for "recursive". It's necessary when copying directories to ensure all contents are copied.

O/P from Terminal:
labex:project/ $ tree
.
├── file1_copy.txt
├── file1.txt
├── file2.txt
├── testdir
│   └── file2.txt
└── testdir_copy
    └── file2.txt

2 directories, 5 files

The mv command is used for both moving and renaming in Linux:

Rename a file:
19 mv file1.txt file1NewName.txt

Move a file to a directory:
20 mv file1NewName.txt testdir/

Rename the Dir
21 mv testdir_copy NewName_testdir

Move and rename in one command:
22 mv testdir/file1NewName.txt ./original_file1.txt


::::::::Removing Files and Directories:::::::::::
23 Remove a file 
rm file1_copy.txt

Remove an empty directory:
24 rmdir new_testdir
rmdir only works on empty directories, and you'll get an error if the directory isn't empty.

Remove a directory and its contents:
25 rm -r testdir
The -r option is needed to remove directories and their contents recursively.

Remove files interactively:
26 rm -i file2.txt
The -i option prompts for confirmation before each removal. Type 'y' and press Enter to confirm deletion

Force removal without prompts:
27 touch remaining_files
   ls
   rm -rf remaining_files

The -rf combination is very powerful and potentially dangerous. It means:

-r: recursive (for directories)
-f: force (ignore nonexistent files, never prompt)


